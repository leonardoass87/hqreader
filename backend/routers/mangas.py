from fastapi import APIRouter, Depends, File, UploadFile, Form, HTTPException
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
import schemas, crud, models
from database import SessionLocal, engine
import os
from uuid import uuid4
from typing import List

# Caminho onde os cap칤tulos (imagens) est칚o armazenados no disco
UPLOADS_BASE_PATH = "C:/Temp/Uploads/Mangas"

# Inicializa o roteador de mang치s
router = APIRouter(
    prefix="/api/mangas",
    tags=["mangas"]
)



# Cria as tabelas no banco de dados (executa uma 칰nica vez ao subir o servidor)
models.Base.metadata.create_all(bind=engine)

# Depend칡ncia para obter uma sess칚o do banco
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# -------------------------------------------------------
# GET /api/mangas/{manga_id} - Retorna um 칰nico mang치
# -------------------------------------------------------
@router.get("/{manga_id}", response_model=schemas.Manga)
def obter_manga(manga_id: int, db: Session = Depends(get_db)):
    manga = crud.get_manga_by_id(db, manga_id)
    if not manga:
        raise HTTPException(status_code=404, detail="Mang치 n칚o encontrado")
    return manga

# -------------------------------------------------------
# GET /api/mangas - Lista todos os mang치s cadastrados
# -------------------------------------------------------
@router.get("/", response_model=list[schemas.Manga])
def listar_mangas(db: Session = Depends(get_db)):
    try:
        return crud.get_mangas(db)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao buscar mang치s: {str(e)}")

# -------------------------------------------------------
# POST /api/mangas - Cria novo mang치 com imagem de capa
# -------------------------------------------------------
@router.post("/", response_model=schemas.Manga)
def criar_manga(
    titulo: str = Form(...),
    descricao: str = Form(...),
    capa: UploadFile = File(...),
    db: Session = Depends(get_db)
):
    try:
        # Gera nome de arquivo 칰nico para a imagem
        extensao = capa.filename.split('.')[-1]
        filename = f"{uuid4()}.{extensao}"
        caminho = os.path.join("uploads", filename)

        # Salva a imagem na pasta local "uploads"
        with open(caminho, "wb") as f:
            f.write(capa.file.read())

        # Cria o mang치 no banco de dados
        manga_data = schemas.MangaCreate(titulo=titulo, descricao=descricao)
        novo_manga = crud.create_manga(db, manga_data, capa_filename=f"/uploads/{filename}")
        return novo_manga

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao criar mang치: {str(e)}")

# -------------------------------------------------------
# -------------------------------------------------------
# POST /api/mangas/{id}/capitulos/upload - Envia imagens e cria cap칤tulo
# -------------------------------------------------------
@router.post("/{manga_id}/capitulos/upload")
def upload_capitulo_com_imagens(
    manga_id: int,
    numero: int = Form(...),
    imagens: List[UploadFile] = File(...),
    db: Session = Depends(get_db)
):
    # Verifica se o mang치 existe no banco de dados
    manga = crud.get_manga_by_id(db, manga_id)
    if not manga:
        raise HTTPException(status_code=404, detail="Mang치 n칚o encontrado")

    # Define nome da pasta do cap칤tulo (usada tamb칠m como slug de acesso via /static)
    pasta_relativa = f"manga_{manga_id}_cap_{numero}"
    pasta_absoluta = os.path.join(UPLOADS_BASE_PATH, pasta_relativa)
    os.makedirs(pasta_absoluta, exist_ok=True)

    # Salva e renomeia as imagens como 001.webp, 002.webp, etc.
    for i, imagem in enumerate(imagens, start=1):
        extensao = imagem.filename.split('.')[-1]
        nome_padronizado = f"{str(i).zfill(3)}.{extensao}"
        caminho_arquivo = os.path.join(pasta_absoluta, nome_padronizado)

        with open(caminho_arquivo, "wb") as f:
            f.write(imagem.file.read())

    # Cria o cap칤tulo no banco com o caminho relativo da pasta
    capitulo_data = schemas.CapituloCreate(
        manga_id=manga_id,
        numero=numero,
        pasta=f"/static/{pasta_relativa}"
    )
    capitulo = crud.create_capitulo(db, capitulo_data)

    return {"mensagem": "Cap칤tulo enviado com sucesso", "capitulo_id": capitulo.id}


# -------------------------------------------------------
# GET /api/mangas/{id}/capitulos - Lista cap칤tulos de um mang치
# -------------------------------------------------------
@router.get("/{manga_id}/capitulos", response_model=list[schemas.Capitulo])
def listar_capitulos(manga_id: int, db: Session = Depends(get_db)):
    return crud.get_capitulos_por_manga(db, manga_id)

# -------------------------------------------------------
# GET /api/mangas/{id}/capitulos/{numero}/imagens
# Retorna a lista de imagens de um cap칤tulo
# -------------------------------------------------------
@router.get("/{manga_id}/capitulos/{numero}/imagens")
def listar_imagens_do_capitulo(manga_id: int, numero: int, db: Session = Depends(get_db)):
    # Busca o cap칤tulo no banco de dados
    capitulo = crud.get_capitulo_por_numero(db, manga_id, numero)
    if not capitulo:
        raise HTTPException(status_code=404, detail="Cap칤tulo n칚o encontrado")

    # Caminho f칤sico da pasta onde est칚o as imagens do cap칤tulo
    pasta_absoluta = os.path.join(UPLOADS_BASE_PATH, capitulo.pasta)

    if not os.path.isdir(pasta_absoluta):
        raise HTTPException(status_code=404, detail="Pasta de imagens n칚o encontrada")

    # Lista as imagens da pasta (filtrando formatos comuns)
    imagens = [
        f"/static/{capitulo.pasta}/{f}"
        for f in sorted(os.listdir(pasta_absoluta))
        if f.lower().endswith((".jpg", ".jpeg", ".png", ".webp"))
    ]

    return JSONResponse(content={"imagens": imagens})

# -------------------------------------------------------
# POST /api/mangas/{id}/capitulos/upload
# Envia um cap칤tulo com m칰ltiplas imagens e cria pasta automaticamente
# -------------------------------------------------------
@router.post("/{manga_id}/capitulos/upload")
def upload_capitulo_com_imagens(
    manga_id: int,
    numero: int = Form(...),
    imagens: List[UploadFile] = File(...),
    db: Session = Depends(get_db)
):
    try:
        # Verifica se o mang치 existe
        manga = crud.get_manga_by_id(db, manga_id)
        if not manga:
            raise HTTPException(status_code=404, detail="Mang치 n칚o encontrado")

        # Gera o nome da pasta com base no ID do mang치 e n칰mero do cap칤tulo
        pasta_nome = f"manga_{manga_id}_cap_{numero}"
        pasta_destino = os.path.join(UPLOADS_BASE_PATH, pasta_nome)

        os.makedirs(pasta_destino, exist_ok=True)

        # Salva as imagens
        for imagem in imagens:
            extensao = imagem.filename.split('.')[-1]
            nome_arquivo = f"{uuid4()}.{extensao}"
            caminho_arquivo = os.path.join(pasta_destino, nome_arquivo)
            with open(caminho_arquivo, "wb") as f:
                f.write(imagem.file.read())

        # Cria o cap칤tulo no banco
        capitulo_data = schemas.CapituloCreate(
            manga_id=manga_id,
            numero=numero,
            pasta=pasta_destino
        )
        capitulo = crud.create_capitulo(db, capitulo_data)

        return {"mensagem": "Cap칤tulo enviado com sucesso", "capitulo_id": capitulo.id}

    except Exception as e:
        print(f"[ERRO] Falha ao enviar cap칤tulo: {str(e)}")  # 游녣 Log local
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")
    
    # -------------------------------------------------------
# DELETE /api/mangas/{id} - Remove um mang치
# -------------------------------------------------------
@router.delete("/{manga_id}")
def deletar_manga(manga_id: int, db: Session = Depends(get_db)):
    manga = crud.get_manga_by_id(db, manga_id)
    if not manga:
        raise HTTPException(status_code=404, detail="Mang치 n칚o encontrado")

    db.delete(manga)
    db.commit()
    return {"mensagem": "Mang치 deletado com sucesso"}

